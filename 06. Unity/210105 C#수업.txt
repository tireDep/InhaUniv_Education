* 유니티 설치
2019.4.17f1

* 버전 추가 시
2020.1.17f1
-> 안드로이드 추가
-> ios 추가
=> 단, mac에서 컴파일이 되므로 어디까지 가능한지는 모름
-> 본 수업은 이 버전으로 진행됨

* Blend for Visual Studio ##
- Unity랑 연동된 버전

* C#
-  C# -> console application

- class name == ##.cs
-> 이름이 동일해야함

- 다른 클래스를 사용하려면 헤더를 추가가 아닌 namespace using 사용
-> 유니티에서는 그다지 의미 없음
-> 유니티는 오브젝트 상속 받고, 서로 연결되어 있음

- 함수 == 메소드

- 값 형식(Value Types), 참조 형식(Reference Types)

- var 변수
-> auto와 동일
-> 전역 변수로 사용 불가, 지역 변수로 사용 가능

- 참조에 의한 매개 변수 전달
-> c / c++ : &
-> c# : ref 키워드 추가 (ref int varName)

- 출력 전용 매개 변수
-> out 키워드 추가 (out int varName)

- 가변길이 매개 변수
-> params 키워드 + 배열 (params int[] args)

- 명명된 매개 변수
-> 변수 순서를 바꿔서 사용할 수 있음
-> 그닥 사용하지 않는 것이 좋음
ex)
int PrintProfile(string name, string phone) { }

PrintPofile("name1","phoneNum");
PrintPofile(name : "name1", phone : "phoneNum");
PrintPofile(phone : "phoneNum", name : "name1");
// 모두 같은 내용

- 선택적 매개 변수
ex) void method(int a, int b = 10) { }

- 접근 한정자
public
protected
private
Internal
-> 같은 어셈블리에 있는 코드에 대해서만 public로 접근
-> 다른 어셈블리에 있는 코드에서는 private

protected internal
-> 같은 어셈블리에 있는 코드에 대해서만 protected로 접근
-> 다른 어셈블리에 있는 코드에서는 private

- base
-> 부모 클래스, 상위 클래스

- sealed
-> 상속이 불가능한 클래스 선언 한정자
-> 상속 시도시 에러 메시지 출력

- 형변환 연산자
-> is : 객체가 해당 형식에 해당하는지를 검사하여 그 결과를 bool 값으로 반환
-> as : 형식 변환 연산자와 같은 역할
         형 변환 연산자가 변환에 실패하는 경우 예외를 던지는 반면에
         as 연산자는 객체 참조를 null로 만든다는 것이 다름

- 메소드 숨기기
-> new 키워드 추가 (public new void Method())
=> 베이스 클래스 감추고 현재 클래스에서 구현된 것 만 노출

- 오버라이딩 봉인
-> sealed 키워드 추가 (public sealed void Method())

- 분할 클래스
-> partial 키워드 추가 (partial class Class)

- 확장 메소드
ex)
namespace 네임스페이스이름
{
	public static class 클래스 이름
	{
		public static 반환형식 메소드이름(this 대상형식 식별자 /*확장하고자하는 클래스 or 형식*/, 매개변수목록)
		{
		}
	}
}

- 프로퍼티
-> 은닉성, 평의성
ex)
class 클래스이름
{
	데이터형식 필드이름;
	접근한정자 데이터형식 프로퍼티이름
	{
		get { return 필드 이름; }
		set { 필드이름 = value; }
		// >> 메소드 내 여러 줄 작성 가능
		// >> 자동구현 프로퍼티 get; set;
		// >> 함수가 필요 없으면 작성하지 않아도 됨
	}
}

- 무명 형식
-> 인스턴스를 만들고 다시는 사용하지 않을 때 유용함

- 델리게이트
-> 콜백 구현
ex)
한정자 delegate 반환형식 델리게이트이름 (매개변수목록);
delegate int MyDelegate(int a, int b);

int Plus(int a, int b) { return a + b; }
int Minus(int a, int b) { return a - b; }

MyDelegate callBack;

callBack = new MyDelegate(Plus);
Console.WriteLine(callBack(3, 4));


callBack = new MyDelegaten(Minus);
Console.WriteLine(callBack(7, 5));


===== 읽어볼 것 =====
- 가비지 컬렉터
- 값 형식, 참조 형식
- ??
- var

// 13강 부터
- 델리게이트

- 람다식

- LINQ

- 리플렉션과 애트리뷰트
-> 리플렉션 빠르게 넘어감
-> 애트리뷰트는 거의 사용 X, 
-> 유니티 사용하면서 소스코드 자체에 히스토리 남길 수 있음

- dynamic 형식
-> 라이브러리 개발 및 배포 시, 
-> 개발 문서에는 해당 함수가 존재하나 지금 당장 존재하지 않을 때 사용할 수 있음
-> 빠르게 넘어감

- 파일 다루기
-> StreamWriter / StreamReader
-> 객체 직렬화

- 스레드와 태스크

- winform, 네트워크 프로그래밍 일단 제외
-> 읽어는 볼 것

- 가비지 컬렉션